leviathan0: leviathan0
leviathan1: PPIfmI1qsA
leviathan2: mEh5PNl10e REMEMBER: ltrace ./<binary> will show all library calls of a program, and can reveal important information! strace shows all system calls
leviathan3: Q0G8j4sakn REMEMBER: symlink attack exploits the access() system call, which checks if the real executor of an suid program has access to a file. There is a brief delay after the call to access(). You can create a race condition on the file you are testing with access to bypass the check on a desired file. First, create a file in a temporary directory, foo. Then, call the suid command to check if user has access to that file. Since user created the file foo the access check passes. While the access check happens, turn the file foo into a symbolic link (not hard link) to the file you dont have access to. Then remove the file and repeat infinitely until you happen to get the correct synchronization
leviathan4: AgvropI4OA
leviathan5: EKKlTF1Xqs
leviathan6: YZ55XPVk2l
leviathan7: 8GpZ5f8Hze